#!/usr/bin/env __run
set -euo pipefail

[[ -v 1 ]] &&	test_prefix="$1" || test_prefix=""

# Determine paths
tests_dir="$PLTS_HOME/test/in"

# Temporary workspace
tmpdir=$(mktemp -d)
trap 'rm -rf "$tmpdir"' EXIT

vardir=./test/var/in/
rm -rf "$vardir"
mkdir -p "$vardir"
echo 'Compiling artifacts to '"$vardir"

# Counters
fail_count=0
total_count=0

function verbosely_echo() {
	[[ "${TEST_QUIET-}" ]] || echo "$@"
}

verbosely_echo "Running integration tests..."
for test_file in "$tests_dir"/"$test_prefix"*.pl; do
  (( total_count += 1 ))
  name=$(basename "$test_file" .pl)

  # Paths for expected and actual outputs
  exp_out="$tmpdir/${name}.exp_out"
  exp_err="$tmpdir/${name}.exp_err"
  act_out="$tmpdir/${name}.act_out"
  act_err="$tmpdir/${name}.act_err"

  # Run expected output via SWI-Prolog
  swipl -q -f "$test_file"\
		-g "current_predicate($name:top/0) -> $name:top ; user:top." \
		-g halt                                                     \
		1>"$exp_out" 2>"$exp_err"                                   \
  	|| true

  # Compile to JavaScript
  jsfile="$vardir/${name}.js"
  swipl -l compile.pl --\
		"$test_file" "$jsfile"

	echo "try { for (const _ of top_0('top')) break; } catch(_) {throw _;}" \
		>> "$jsfile"

  # Run compiled output via Node.js
  node "$jsfile" 1>"$act_out" 2>"$act_err" || true

  # Compare outputs
  # TODO Compare status codes too.
  if cmp -s "$exp_out" "$act_out" && cmp -s "$exp_err" "$act_err"; then
     verbosely_echo "✓ $name: passed"
  else
    echo "✗ $name: FAILED"
    echo "  Expected stdout:"
    sed 's/^/    /' "$exp_out"
    echo "  Actual stdout:"
    sed 's/^/    /' "$act_out"
    echo "  Expected stderr:"
    sed 's/^/    /' "$exp_err"
    echo "  Actual stderr:"
    sed 's/^/    /' "$act_err"
    ((fail_count++))
  fi
done

# Summary and exit status
echo
if ((fail_count>0)); then
  echo "$fail_count of $total_count tests failed"
  exit 1
else
  echo  "All $total_count tests passed"
  exit 0
fi
